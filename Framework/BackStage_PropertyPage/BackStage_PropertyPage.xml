<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BackStage_PropertyPage</name>
    </assembly>
    <members>
        <member name="T:BackStage_PropertyPage.ApplicationSettingsView">
            <summary>
            Interaction logic for ApplicationSettingsView.xaml
            </summary>
        </member>
        <member name="M:BackStage_PropertyPage.ApplicationSettingsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BackStage_PropertyPage.ApplicationSettingsViewModel">
            <summary>
            The viewmodel for the ApplicationSettings view.  Encapsulates the sample set of applications settings.
            </summary>
            <remarks>
            Application settings are retrieved and stored using the Visual Studio application settings paradigm.  
            </remarks>
        </member>
        <member name="F:BackStage_PropertyPage.ApplicationSettingsViewModel._isGeneralExpanded">
            <summary>
            Gets and sets the expansion state of the General expander
            </summary>
        </member>
        <member name="F:BackStage_PropertyPage.ApplicationSettingsViewModel._isOtherExpanded">
            <summary>
            Gets and sets the expansion state of the Other expander
            </summary>
        </member>
        <member name="F:BackStage_PropertyPage.ApplicationSettingsViewModel._generalSetting">
            <summary>
            Gets and sets the state of the General setting
            </summary>
            <remarks>
            Use the base.IsModified flag to indicate when the page has changed
            </remarks>
        </member>
        <member name="F:BackStage_PropertyPage.ApplicationSettingsViewModel._otherSetting">
            <summary>
            Gets and sets the state of the Other setting
            </summary>
            <remarks>
            Use the base.IsModified flag to indicate when the page has changed
            </remarks>
        </member>
        <member name="M:BackStage_PropertyPage.ApplicationSettingsViewModel.InitializeAsync">
            <summary>
            Initializes the page using the settings.
            </summary>
            <returns>A Task that represents the InitializeAsync method</returns>
        </member>
        <member name="M:BackStage_PropertyPage.ApplicationSettingsViewModel.CancelAsync">
            <summary>
            Perform special actions when the page is to be cancelled.
            </summary>
            <returns>A Task that represents CancelAsync</returns>
        </member>
        <member name="M:BackStage_PropertyPage.ApplicationSettingsViewModel.CommitAsync">
            <summary>
            Perform special actions when the page is to be committed.
            </summary>
            <remarks>
            Save the current state of the settings.
            </remarks>
            <returns>A Task that represents CommitAsync</returns>
        </member>
        <member name="M:BackStage_PropertyPage.ApplicationSettingsViewModel.IsDirty">
            <summary>
            Determines if the current settings are different from the original.
            </summary>
            <returns>true if the current settings are different</returns>
        </member>
        <member name="T:BackStage_PropertyPage.Module1">
            <summary>
            This sample illustrates how to 
            1. add a new backstage item  
            2. add property sheet items into the Options property pages
            3. save and restore project settings
            </summary>
            <remarks>
            Backstage items can be either a tab or a button. As per other controls they have a reference in the config.daml file.  However they are different from other controls 
            in that they are not children of the module tag - they are children of the backstage tag. This sample shows how to add a new tab following the MVVM pattern. 
            The tab can be positioned using the "insert" and "placeWith" attributes in the config.daml.  The SampleBackstageTabView xaml file uses ArcGIS Pro styles to 
            allow the custom tab to look those those in the existing application.
            <para>
            Property sheets are used to capture settings. They can be either project or application settings. You can insert your custom property sheets into the existing Options
            property sheets which are displayed from the backstage Options tab.  This is achieved in the config.daml by using the updateSheet xml tag and specifying the 
            esri_core_optionsPropertySheet id.  Use the group attribute on the insertPage tag to specify whether your view/viewmodel represents project or application settings. 
            This sample has an example of both project and application settings, including illustrating how these settings can be saved. 
            </para>
            <para>
            Modules can write out their own set of properties when a project is saved. Correspondingly, modules can read their own settings when a project is opened.  The module
            contains two methods OnReadStateAsync and OnWriteStateAsync which should be overriden to read and write module specific settings or properties. 
            </para>
            1. Open this solution in Visual Studio 2013.  
            1. Click the build menu and select Build Solution.
            1. Click the Start button to open ArCGIS Pro.  ArcGIS Pro will open.
            1. Open any project - it can be an existing project containing data or a new empty project.
            1. Click the project tab.  See that there is a new Sample Tab item in the backstage.  Select it and it will show the new backstage tab.
            1. Click the project tab and select the Options backstage item.  The options property page will display.
            1. See that there is a Sample Project Settings under Project and a Sample App Settings under Application. 
            1. Change the project settings and application settings. 
            1. Save the project.
            1. Open another project (or create new); return to the Project|Options|Sample Project Settings and see that the settings have been reset.
            1. Open the project from step4; return to the Project|Options|Sample Project Settings and see that the settings have been restored.
            ![UI](Screenshots/Screen.png)
            </remarks>
        </member>
        <member name="P:BackStage_PropertyPage.Module1.Current">
            <summary>
            Retrieve the singleton instance to this module here
            </summary>
        </member>
        <member name="M:BackStage_PropertyPage.Module1.CanUnload">
            <summary>
            Called by Framework when ArcGIS Pro is closing
            </summary>
            <returns>False to prevent Pro from closing, otherwise True</returns>
        </member>
        <member name="M:BackStage_PropertyPage.Module1.ExecuteCommand(System.String)">
            <summary>
            Generic implementation of ExecuteCommand to allow calls to
            <see cref="M:ArcGIS.Desktop.Framework.FrameworkApplication.ExecuteCommand(System.String)"/> to execute commands in
            your Module.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BackStage_PropertyPage.Module1.#ctor">
            <summary>
            Module constructor.  Subscribe to the ProjectOpened and ProjectClosed events.
            </summary>
        </member>
        <member name="M:BackStage_PropertyPage.Module1.Uninitialize">
            <summary>
            Uninitialize method.  Make sure the module unsubscribes from the events.
            </summary>
        </member>
        <member name="M:BackStage_PropertyPage.Module1.OnReadSettingsAsync(ArcGIS.Desktop.Framework.Contracts.ModuleSettingsReader)">
            <summary>
            Reads the module settings from a project.  This method is called when a project is opened if the project contains this module's settings. 
            Use the <paramref name="settings"/> to obtain the module values.
            </summary>
            <param name="settings">Contains the module settings</param>
            <returns>A Task that represents the OnReadStateAsync method</returns>
        </member>
        <member name="M:BackStage_PropertyPage.Module1.OnWriteSettingsAsync(ArcGIS.Desktop.Framework.Contracts.ModuleSettingsWriter)">
            <summary>
            Writes the module's settings.  This method is called when a project is saved.  Populate the modules settings into the ModuleSettingsWriter settings.
            </summary>
            <param name="settings">The settings which will be written out</param>
            <returns>A Task that represents the OnWriteStateAsync method</returns>
        </member>
        <member name="M:BackStage_PropertyPage.Module1.OnProjectOpen(ArcGIS.Desktop.Core.Events.ProjectEventArgs)">
            <summary>
            Project opened event.  
            </summary>
            <remarks>
            This is necessary because OnReadStateAsync is NOT called if a project does not contain the module settings. This provides a way to restore the settings to 
            default when a project not containing our settings is opened.
            </remarks>
            <param name="args">project opened event arguments</param>
        </member>
        <member name="M:BackStage_PropertyPage.Module1.OnProjectClosed(ArcGIS.Desktop.Core.Events.ProjectEventArgs)">
            <summary>
            Project closed event.  Make sure we reset the settings flag.
            </summary>
            <param name="args">project closed event arguments</param>
        </member>
        <member name="F:BackStage_PropertyPage.Module1._moduleSettings">
            <summary>
            the dictionary of project settings
            </summary>
        </member>
        <member name="T:BackStage_PropertyPage.ProjectSettingsView">
            <summary>
            Interaction logic for ProjectSettingsView.xaml
            </summary>
            <summary>
            ProjectSettingsView
            </summary>
        </member>
        <member name="M:BackStage_PropertyPage.ProjectSettingsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BackStage_PropertyPage.ProjectSettingsViewModel">
            <summary>
            The viewmodel for the ProjectSettings view.  Encapsulates the sample set of project settings.
            </summary>
            <remarks>
            Project settings are retrieved and stored using the <see cref="!:ArcGIS.Desktop.Core.Project.OnReadStateAsync"> OnReadStateAsync </see> and 
            <see cref="!:ArcGIS.Desktop.Core.Project.OnWriteStateAsync"> OnWriteStateAsync </see> methods on the <see cref="T:ArcGIS.Desktop.Core.Project"> project.</see>
            </remarks>
        </member>
        <member name="F:BackStage_PropertyPage.ProjectSettingsViewModel._moduleSetting1">
            <summary>
            Gets and sets the first setting
            </summary>
            <remarks>
            Use the base.IsModified flag to indicate when the page has changed
            </remarks>
        </member>
        <member name="F:BackStage_PropertyPage.ProjectSettingsViewModel._moduleSetting2">
            <summary>
            Gets and sets the second setting
            </summary>
            <remarks>
            Use the base.IsModified flag to indicate when the page has changed
            </remarks>
        </member>
        <member name="M:BackStage_PropertyPage.ProjectSettingsViewModel.InitializeAsync">
            <summary>
            Initializes the page using the settings.
            </summary>
            <returns>A Task that represnets the InitializeAsync method</returns>
        </member>
        <member name="M:BackStage_PropertyPage.ProjectSettingsViewModel.CancelAsync">
            <summary>
            Perform special actions when the page is to be cancelled.
            </summary>
            <returns>A Task that represents CancelAsync</returns>
        </member>
        <member name="M:BackStage_PropertyPage.ProjectSettingsViewModel.CommitAsync">
            <summary>
            Perform special actions when the page is to be committed.
            </summary>
            <remarks>
            Stores the current state of the settings.  Ensure that the project is set dirty if the settings have changed from the original values. 
            Setting the project dirty ensure that the application asks to "save changes" when the project is closed.  The settings will be
            saved when the project is saved.
            </remarks>
            <returns>A Task that represents CommitAsync</returns>
        </member>
        <member name="M:BackStage_PropertyPage.ProjectSettingsViewModel.IsDirty">
            <summary>
            Determines if the current settings are different from the original.
            </summary>
            <returns>true if the current settings are different</returns>
        </member>
        <member name="T:BackStage_PropertyPage.SampleBackstageTabView">
            <summary>
            Interaction logic for SampleBackstageTabView.xaml
            </summary>
        </member>
        <member name="M:BackStage_PropertyPage.SampleBackstageTabView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:BackStage_PropertyPage.SampleBackstageTabViewModel">
            <summary>
            Sample backstage tab.  It contains a simple checkbox.
            </summary>
        </member>
        <member name="M:BackStage_PropertyPage.SampleBackstageTabViewModel.InitializeAsync">
            <summary>
            Initializes the tab.  
            </summary>
            <returns>A Task that represents InitializeAsync </returns>
        </member>
        <member name="M:BackStage_PropertyPage.SampleBackstageTabViewModel.UninitializeAsync">
            <summary>
             Uninitializes the tab. 
            </summary>
            <returns>A Task that represents UninitializeAsync</returns>
        </member>
        <member name="F:BackStage_PropertyPage.SampleBackstageTabViewModel._isSomethingChecked">
            <summary>
            Gets and sets the state of the "Do Something here" checkbox
            </summary>
        </member>
    </members>
</doc>
