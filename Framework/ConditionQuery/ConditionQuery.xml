<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConditionQuery</name>
    </assembly>
    <members>
        <member name="T:ConditionsQuery.Data.EvaluateCondition">
            <summary>
            Given the state, at any given time in Pro, evaluate which conditions
            are currently true.
            </summary>
        </member>
        <member name="M:ConditionsQuery.Data.EvaluateCondition.UpdateConditionsAndStateAsync">
            <summary>
            Process the condition enabled/disabled status based on the provided
            list of active state ids
            </summary>
            <param name="vm"></param>
            <param name="activeStates"></param>
        </member>
        <member name="P:ConditionsQuery.Data.EvaluateCondition.ActiveStates">
            <summary>
            Gets a collection of the active states
            </summary>
        </member>
        <member name="P:ConditionsQuery.Data.EvaluateCondition.EnabledConditions">
            <summary>
            Gets a collection of the enabled conditions
            </summary>
        </member>
        <member name="P:ConditionsQuery.Data.EvaluateCondition.Lock">
            <summary>
            Gets the lock being used to synchronize the collections
            </summary>
        </member>
        <member name="T:ConditionsQuery.Models.Condition">
            <summary>
            Provides an implementation of the daml condition element.
            </summary>
            <remarks>Conditions can either be true or false depending on whether
            their corresponding 'state' is true or false. State, within Pro, is
            constantly changing in response to the UI Context, selected items,
            Project content changes, etc. Context changes are propogated to the UI
            in many cases via conditions. Whenever a condition changes from true to
            false, any UI elements using that condition are enabled/disabled or visible/hidden
            depending on what kind of UI element they are.<br/>
            You can read more about conditions here:<br/>
            <a href="https://github.com/ArcGIS/arcgis-pro-sdk/wiki/ProConcepts-Framework#condition-and-state">
            https://github.com/ArcGIS/arcgis-pro-sdk/wiki/ProConcepts-Framework#condition-and-state</a></remarks>
        </member>
        <member name="P:ConditionsQuery.Models.Condition.ID">
            <summary>
            The condition id from the DAML
            </summary>
        </member>
        <member name="P:ConditionsQuery.Models.Condition.Caption">
            <summary>
            Condition caption as read from the DAML
            </summary>
            <remarks>Optional</remarks>
        </member>
        <member name="P:ConditionsQuery.Models.Condition.IsEnabled">
             <summary>
             Gets and Sets whether the condition is currently enabled
             </summary>
             <remarks>The condition enabled/disabled state is controlled
             by whether or not Pro's active state matches the condition's
             state combination(s).
             The combination of state that a given condition may have can
             be quite complex and include Or, And, and Not relationships that
             can be nested.
            </remarks>
        </member>
        <member name="P:ConditionsQuery.Models.Condition.Xml">
            <summary>
            Gets the xml of the condition as read from the daml
            </summary>
        </member>
        <member name="M:ConditionsQuery.Models.Condition.Configure(System.Xml.Linq.XElement)">
            <summary>
            Configure the condition and state based on the condition xml read
            from the daml
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:ConditionsQuery.Models.Condition.ConfigurePane(System.Xml.Linq.XElement)">
            <summary>
            Creates a condition for the given pane
            </summary>
            <remarks>Pane ids in Pro are implicitly conditions that are set true/false
            whenever their corresponding pane is activated/deactivated</remarks>
            <param name="pane"></param>
            <returns></returns>
        </member>
        <member name="M:ConditionsQuery.Models.Condition.ContainsState(System.String)">
            <summary>
            Does the condition contain the given state id?
            </summary>
            <param name="stateID"></param>
            <returns></returns>
        </member>
        <member name="M:ConditionsQuery.Models.Condition.GetStatesAsFlattenedList">
            <summary>
            Get the contained ids of the condition's states
            </summary>
            <remarks>Strips out the hierarchy and any boolean operators</remarks>
            <returns></returns>
        </member>
        <member name="M:ConditionsQuery.Models.Condition.HasNotState">
            <summary>
            Gets whether or not the condition contains any "Not"
            state operators
            </summary>
            <remarks>Conditions containing Not state require special handling</remarks>
            <returns>True if the condition contains a "not" state node</returns>
        </member>
        <member name="M:ConditionsQuery.Models.Condition.MatchContext(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Evaluates the condition against the given list of state ids
            </summary>
            <param name="activeStates"></param>
            <returns>True if the condition evaluates to true for the given state</returns>
        </member>
        <member name="M:ConditionsQuery.Models.Condition.GetEnumerator">
            <summary>
            Required for implementation of IEnumerable
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConditionsQuery.Models.Condition.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Required for implementation of IEnumerable
            </summary>
            <returns></returns>
        </member>
        <member name="T:ConditionsQuery.Models.StateType">
            <summary>
            The type of state node
            </summary>
        </member>
        <member name="T:ConditionsQuery.Models.State">
            <summary>
            Implementation of the state element from Config.daml. A state can either be
            true or false.
            </summary>
            <remarks>State can either be an id or can be a boolean operator. Boolean
            operators are applied to their children. A parent state will evaluate to
            true or false depending on the true/false state of its component children</remarks>
        </member>
        <member name="M:ConditionsQuery.Models.State.Contains(System.String)">
            <summary>
            Does the state contain this id?
            </summary>
            <param name="id"></param>
            <returns>True if the state is found</returns>
        </member>
        <member name="M:ConditionsQuery.Models.State.GetStateIdsAsFlattenedList(ConditionsQuery.Models.StateType)">
            <summary>
            Get the contained state ids of the provided StateType.State
            </summary>
            <param name="st"></param>
            <returns>A list of state ids</returns>
        </member>
        <member name="M:ConditionsQuery.Models.State.MatchContext(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Given a list of the active state ids, does the context of this
            state match that of the active ids?
            </summary>
            <param name="activeStates"></param>
            <returns>True if the context matches, otherwise false</returns>
        </member>
        <member name="P:ConditionsQuery.Models.State.StateType">
            <summary>
            Gets and sets the StateType of the state node
            </summary>
        </member>
        <member name="P:ConditionsQuery.Models.State.ID">
            <summary>
            Gets and sets the state id. Can be empty string for
            state nodes that are boolean operators
            </summary>
        </member>
        <member name="M:ConditionsQuery.Models.State.GetEnumerator">
            <summary>
            Required for implementation of IEnumerable
            </summary>
            <returns></returns>
        </member>
        <member name="M:ConditionsQuery.Models.State.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Required for implementation of IEnumerable
            </summary>
            <returns></returns>
        </member>
        <member name="T:ConditionQuery.Module1">
            <summary>
            This Sample queries the application state to determine which conditions are currently enabled.
            </summary>
            <remarks>
            1. In Visual Studio click the Build menu. Then select Build Solution.
            1. This solution is using the **AvalonEdit Nuget**.  If needed, you can install the Nuget from the "Nuget Package Manager Console" by using this script: "Install-Package AvalonEdit".
            1. Click Start button to open ArcGIS Pro.
            1. ArcGIS Pro will open.
            1. Open any ArcGIS Pro project file containing data.
            1. If the project doesn't have a map view add a new map view, and if the project doesn't have a layout view add a layout view.
            1. Click on the Add-in tab and see the 'Show Conditions' button.
            ![UI](Screenshots/Screenshot1.png)
            1. Click the 'Show Conditions' button to bring up the 'Conditions' dockpane into view.
            1. Open the 'Active States' and the 'Selected Condition XML' panes and select a condition under 'Enabled Conditions'.  This will show the 'Condition XML' for the selected condition, if a XML condition has been defined for the selected condition.
            ![UI](Screenshots/Screenshot2.png)
            1. Select the map view as the active view and click the refresh button on the Condition dock pane.  You should now find the 'esri_mapping_mapPane' condition under 'Active States'.
            ![UI](Screenshots/Screenshot3.png)
            1. Select the layout view as the active view and click the refresh button on the Condition dock pane.  You should now find that the 'esri_mapping_mapPane' condition is not listed under 'Active States' anymore.
            ![UI](Screenshots/Screenshot4.png)
            </remarks>
        </member>
        <member name="P:ConditionQuery.Module1.Current">
            <summary>
            Retrieve the singleton instance to this module here
            </summary>
        </member>
        <member name="M:ConditionQuery.Module1.CanUnload">
            <summary>
            Called by Framework when ArcGIS Pro is closing
            </summary>
            <returns>False to prevent Pro from closing, otherwise True</returns>
        </member>
        <member name="T:ConditionQuery.UI.AvalonEditorWrapper">
            <summary>
            Interaction logic for AvalonEditorWrapper.xaml
            </summary>
            <summary>
            AvalonEditorWrapper
            </summary>
        </member>
        <member name="F:ConditionQuery.UI.AvalonEditorWrapper.TextProperty">
            <summary>
            Dependency property to be used for binding to the Avalon Editor
            </summary>
        </member>
        <member name="P:ConditionQuery.UI.AvalonEditorWrapper.Text">
            <summary>
            Gets and sets the Avalon Editor text content
            </summary>
        </member>
        <member name="M:ConditionQuery.UI.AvalonEditorWrapper.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ConditionQuery.UI.ConditionsView">
            <summary>
            Interaction logic for ConditionsView.xaml
            </summary>
            <summary>
            ConditionsView
            </summary>
        </member>
        <member name="M:ConditionQuery.UI.ConditionsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ConditionQuery.UI.ConditionsViewModel.InitializeAsync">
            <summary>
            Called when the pane is first created to give it the opportunity to initialize itself asynchronously.
            </summary>
        </member>
        <member name="P:ConditionQuery.UI.ConditionsViewModel.SelectedCondition">
            <summary>
            Gets and sets the selected condition
            </summary>
        </member>
        <member name="P:ConditionQuery.UI.ConditionsViewModel.SelectedConditionXml">
            <summary>
            Gets the xml of the selected condition
            </summary>
        </member>
        <member name="P:ConditionQuery.UI.ConditionsViewModel.ConditionLoader">
            <summary>
            Gets the ConditionLoader that will evaluate the current Pro conditions
            </summary>
        </member>
        <member name="P:ConditionQuery.UI.ConditionsViewModel.RefreshCommand">
            <summary>
            Gets the refresh command
            </summary>
        </member>
        <member name="M:ConditionQuery.UI.ConditionsViewModel.OnActivate(System.Boolean)">
            <summary>
            Called whenever the DockPane is activated or deactivated.
            </summary>
            <param name="isActive">Has the Pane been activated or deactivated.</param>
        </member>
        <member name="M:ConditionQuery.UI.ConditionsViewModel.OnHidden">
            <summary>
            Called when the DockPane is completely hidden.
            </summary>
            <remarks>
            DockPanes are singletons and pushing their Close button really just hides them.
            </remarks>
        </member>
        <member name="M:ConditionQuery.UI.ConditionsViewModel.Show">
            <summary>
            Show the DockPane.
            </summary>
        </member>
        <member name="T:ConditionQuery.UI.Conditions_ShowButton">
            <summary>
            Button implementation to show the DockPane.
            </summary>
        </member>
    </members>
</doc>
